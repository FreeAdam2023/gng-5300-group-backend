name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # 仅在 `main` 分支有新的 push 时触发

jobs:
  # Step 1: Code Lint and Format Check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Run Lint and Format Checks
        run: |
          isort --check-only .  # Import order check
          black --check .  # Format check
          flake8 .  # Code quality check

  # Step 2: Run Tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint  # 确保 lint 检查通过后运行
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies for Tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Tests
        run: pytest --cov=./ --cov-report=xml

  # Step 3: Build and Push Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test  # 确保测试通过后运行
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry (GHCR)
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build --no-cache -t ghcr.io/wordiverse/fitness-app-docker:${{ github.sha }} .

      - name: Push Docker Image to GHCR
        run: |
          docker push ghcr.io/wordiverse/fitness-app-docker:${{ github.sha }}

  # Step 4: Deploy to Azure VM
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest
    needs: build  # 确保 Docker 镜像构建完成后运行
    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}" > course-vm_key.pem
          chmod 600 course-vm_key.pem

      - name: Login and Deploy to Azure VM
        run: |
          ssh -i course-vm_key.pem -o StrictHostKeyChecking=no ${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_IP }} << 'EOF'
            echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            docker pull ghcr.io/wordiverse/fitness-app-docker:${{ github.sha }}

            docker stop fitness-container || true
            docker rm fitness-container || true

            docker images --filter "dangling=true" -q | xargs -r docker rmi
            docker images ghcr.io/wordiverse/fitness-app-docker --filter "before=ghcr.io/wordiverse/fitness-app-docker:${{ github.sha }}" -q | xargs -r docker rmi

            docker run -d --name fitness-container \
              -e GITHUB_SHA="${{ github.sha }}" \
              -e ALGORITHM="${{ secrets.ALGORITHM }}" \
              -e MONGO_URI="${{ secrets.MONGO_URI }}" \
              -e SECRET_KEY="${{ secrets.SECRET_KEY }}" \
              -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
              -e GROQ_API_KEY="${{ secrets.GROQ_API_KEY }}" \
              -e DEBUG="${{ secrets.DEBUG }}" \
              -p 80:8000 ghcr.io/wordiverse/fitness-app-docker:${{ github.sha }}
          EOF

      - name: Cleanup SSH Key
        run: rm -f course-vm_key.pem
